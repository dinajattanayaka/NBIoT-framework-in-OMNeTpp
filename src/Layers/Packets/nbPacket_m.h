//
// Generated file, do not edit! Created by nedtool 5.1 from Layers/Packets/nbPacket.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __NBPACKET_M_H
#define __NBPACKET_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0501
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
    #include "packetDefinition.h"
// }}

/**
 * Class generated from <tt>Layers/Packets/nbPacket.msg:5</tt> by nedtool.
 * <pre>
 * packet nbPacket
 * {
 *     int type;
 *     int schedulingFrequency = 0;
 *     double signalStrength;   //for coverage levels
 *     double carrierFreq;
 *     int ueID;
 *     int RAChannelID;
 *     int uplinkChannelID;
 *     int downlinkChannelID;
 * 
 *     int trafficType;
 * 
 *     double preambleVal;
 * }
 * </pre>
 */
class nbPacket : public ::omnetpp::cPacket
{
  protected:
    int type;
    int schedulingFrequency;
    double signalStrength;
    double carrierFreq;
    int ueID;
    int RAChannelID;
    int uplinkChannelID;
    int downlinkChannelID;
    int trafficType;
    double preambleVal;

  private:
    void copy(const nbPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const nbPacket&);

  public:
    nbPacket(const char *name=nullptr, short kind=0);
    nbPacket(const nbPacket& other);
    virtual ~nbPacket();
    nbPacket& operator=(const nbPacket& other);
    virtual nbPacket *dup() const override {return new nbPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getType() const;
    virtual void setType(int type);
    virtual int getSchedulingFrequency() const;
    virtual void setSchedulingFrequency(int schedulingFrequency);
    virtual double getSignalStrength() const;
    virtual void setSignalStrength(double signalStrength);
    virtual double getCarrierFreq() const;
    virtual void setCarrierFreq(double carrierFreq);
    virtual int getUeID() const;
    virtual void setUeID(int ueID);
    virtual int getRAChannelID() const;
    virtual void setRAChannelID(int RAChannelID);
    virtual int getUplinkChannelID() const;
    virtual void setUplinkChannelID(int uplinkChannelID);
    virtual int getDownlinkChannelID() const;
    virtual void setDownlinkChannelID(int downlinkChannelID);
    virtual int getTrafficType() const;
    virtual void setTrafficType(int trafficType);
    virtual double getPreambleVal() const;
    virtual void setPreambleVal(double preambleVal);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const nbPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, nbPacket& obj) {obj.parsimUnpack(b);}


#endif // ifndef __NBPACKET_M_H

